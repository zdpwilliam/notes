package com.william.base;import com.google.common.eventbus.AsyncEventBus;import com.google.common.eventbus.EventBus;import com.google.common.eventbus.Subscribe;import java.util.Date;import java.util.concurrent.Executors;/** * Created by william on 2016/12/28. *//* 事件总线系统使用以下术语描述事件分发： 事件	    可以向事件总线发布的对象 订阅	    向事件总线注册监听者以接受事件的行为 监听者	    提供一个处理方法，希望接受和处理事件的对象 处理方法	    监听者提供的公共方法，事件总线使用该方法向监听者发送事件；该方法应该用 Subscribe 注解 发布消息	    通过事件总线向所有匹配的监听者提供事件 */public class EventBusTest {    /**     * 传统上，Java 的进程内事件分发都是通过发布者和订阅者之间的显式注册实现的。设计 EventBus 就是为了取代这种显示     * 注册方式，使组件间有了更好的解耦。EventBus 不是通用型的发布-订阅实现，不适用于进程间通信。把已有的进程内事件分     * 发系统迁移到 EventBus 非常简单。     */    public static void main(String[] args) {        siginalThreadConsumer();        multiThread();    }    public static void siginalThreadConsumer() {        EventBus eventBus = new EventBus();//        eventBus.post();//        eventBus.identifier();//        eventBus.register();//        eventBus.unregister();        EventBus bus = new EventBus("william bus");        bus.register(new SFEventListener());        bus.register(new YTOEventListener());        SignEvent sign1 = new SignEvent("SF", "比熊啊", new Date());        SignEvent sign2 = new SignEvent("YTO", "你妹的", new Date());        bus.post(sign1);        bus.post(sign2);        System.out.println(bus.identifier());    }    public static void multiThread() {        EventBus bus = new AsyncEventBus(Executors.newFixedThreadPool(5));        bus.register(new SFEventListener());        bus.register(new YTOEventListener());        SignEvent sign1 = new SignEvent("SF", "比熊啊", new Date());        SignEvent sign2 = new SignEvent("YTO", "你妹的", new Date());        bus.post(sign1);        bus.post(sign2);    }    static class SFEventListener {        @Subscribe        public void consign(SignEvent signEvent) {            if (signEvent.getCompanyName().equalsIgnoreCase("SF")) {                System.out.println("SF。。。开始发货");                System.out.println(signEvent.getMessage());            }        }        @Subscribe        public void delivery(SignEvent signEvent) {            if (signEvent.getCompanyName().equalsIgnoreCase("SF")) {                System.out.println("SF。。。开始投递");            }        }    }    static class YTOEventListener {        @Subscribe        public void consign(SignEvent signEvent) {            if (signEvent.getCompanyName().equalsIgnoreCase("YTO")) {                System.out.println("YTO。。。开始发货");                System.out.println(signEvent.getMessage());            }        }        @Subscribe        public void delivery(SignEvent signEvent) {            if (signEvent.getCompanyName().equalsIgnoreCase("YTO")) {                System.out.println("YTO。。。开始投递");            }        }    }    static class SignEvent {        private String companyName;        private String signName;        private Date signDate;        public SignEvent(String name, String signName, Date signDate) {            super();            this.companyName = name;            this.signName = signName;            this.signDate = signDate;        }        public String getMessage() {            StringBuilder sb = new StringBuilder();            sb.append("物流公司：").append(this.companyName);            sb.append("签收人：").append(signName).append(",签收日期：").append(signDate);            return sb.toString();        }        public String getCompanyName() {            return companyName;        }        public void setCompanyName(String companyName) {            this.companyName = companyName;        }        public String getSignName() {            return signName;        }        public void setSignName(String signName) {            this.signName = signName;        }        public Date getSignDate() {            return signDate;        }        public void setSignDate(Date signDate) {            this.signDate = signDate;        }    }}