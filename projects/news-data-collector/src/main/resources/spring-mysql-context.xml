<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://mybatis.org/schema/mybatis-spring
        http://mybatis.org/schema/mybatis-spring.xsd"
       default-lazy-init="false">

 	<!-- MySQL数据库配置 -->
	<bean id="customNewsDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close"
		lazy-init="false">
		<property name="driverClass">
			<value>${mysql.driver}</value>
		</property>
		<property name="jdbcUrl">
			<value>${jdbc.url}</value>
		</property>
		<property name="user">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<property name="initialPoolSize">
			<value>${sdb.initialPoolSize}</value>
		</property>
		<property name="minPoolSize">
			<value>${sdb.minPoolSize}</value>
		</property>
		<property name="maxPoolSize">
			<value>${sdb.maxPoolSize}</value>
		</property>
		<property name="acquireIncrement">
			<value>${sdb.acquireIncrement}</value>
		</property>
		<property name="maxIdleTime">
			<value>${sdb.maxIdleTime}</value>
		</property>
		<property name="checkoutTimeout">
			<value>${sdb.checkoutTimeout}</value>
		</property>
	</bean>
	
	<mybatis:scan base-package="com.william.news.dao"/>
	
	<!-- 数据库事务配置 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="customNewsDataSource" />
	</bean>
	
    <!-- database overall config (mybatis) -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="customNewsDataSource"/>
    </bean>
	
    <!-- 注意下面proxy-target-class属性决定是基于接口的还是基于类的代理被创建。如果proxy-target-class 属性值被设置为true，
	    那么基于类的代理将起作用（这时需要cglib库）。如果proxy-target-class属值被设置为false或者这个属性被省略，那么就默认采用
	    基于jdk 的接口的动态代理。 -->
    <tx:annotation-driven transaction-manager="txManager" proxy-target-class="true" />
	<!--
	    <tx:advice id="txAdvice" transaction-manager="txManager">
	        <tx:attributes>
	        	<tx:method name="*" propagation="REQUIRED" />
	            <tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.RuntionException"/>
	        </tx:attributes>
	    </tx:advice>
	    <aop:config expose-proxy="true" proxy-target-class="true">
	        <aop:pointcut id="txPointcut" expression="execution(* com.ximalaya.openapi.service.permission.service.impl.*.*Tx(..))"/>
			<aop:pointcut id="txPointcut" expression="execution(* tx*(..))"/>
	        <aop:pointcut id="txPointcut" expression="execution(* com.ximalaya.openapi.service.permission.service.impl.*.*(..))"/>
	        <aop:advisor id="txAdvisor" advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	    </aop:config> 
	-->
</beans>